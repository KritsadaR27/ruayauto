package handler

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	service "ruaymanagement/backend/internal/ChatBotCore/services"
)

// KeywordHandler handles HTTP requests for keyword operations
type KeywordHandler struct {
	keywordService *service.KeywordService
}

// NewKeywordHandler creates a new keyword handler
func NewKeywordHandler(keywordService *service.KeywordService) *KeywordHandler {
	return &KeywordHandler{
		keywordService: keywordService,
	}
}

// GetKeywords handles GET /api/keywords
func (h *KeywordHandler) GetKeywords(c *gin.Context) {
	ctx := context.Background()
	
	keywords, err := h.keywordService.GetAllKeywords(ctx)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
"error": "Failed to retrieve keywords",
"details": err.Error(),
		})
		return
	}

	// Transform to frontend format
	pairs := make([]map[string]interface{}, 0)
	for _, keyword := range keywords {
		pairs = append(pairs, map[string]interface{}{
"keyword":  keyword.Keyword,
"response": keyword.Response,
})
	}

	c.JSON(http.StatusOK, gin.H{
"pairs": pairs,
"total": len(keywords),
})
}

// SaveKeywords handles POST /api/keywords (legacy compatibility)
func (h *KeywordHandler) SaveKeywords(c *gin.Context) {
	var req struct {
		Pairs []struct {
			Keyword  string `json:"keyword"`
			Response string `json:"response"`
		} `json:"pairs"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
"error": "Invalid request format",
"details": err.Error(),
		})
		return
	}

	ctx := context.Background()
	created := 0
	errors := make([]string, 0)

	// Process each keyword pair
	for _, pair := range req.Pairs {
		err := h.keywordService.UpsertKeyword(ctx, pair.Keyword, pair.Response)
		if err != nil {
			errors = append(errors, fmt.Sprintf("Failed to save keyword '%s': %s", pair.Keyword, err.Error()))
		} else {
			created++
		}
	}

	result := gin.H{
		"ok": true,
		"saved": created,
	}

	if len(errors) > 0 {
		result["errors"] = errors
		result["partial_success"] = true
	}

	c.JSON(http.StatusOK, result)
}

// HealthCheck handles GET /health
func (h *KeywordHandler) HealthCheck(c *gin.Context) {
	ctx := context.Background()
	
	// Try to get keywords to verify database connectivity
	_, err := h.keywordService.GetAllKeywords(ctx)
	
	health := gin.H{
		"status": "healthy",
		"service": "keyword-service",
		"timestamp": time.Now().UTC(),
	}
	
	if err != nil {
		health["status"] = "unhealthy"
		health["database"] = gin.H{
			"status": "error",
			"error": err.Error(),
		}
		c.JSON(http.StatusServiceUnavailable, health)
		return
	}
	
	health["database"] = gin.H{
		"status": "connected",
	}
	
	c.JSON(http.StatusOK, health)
}
